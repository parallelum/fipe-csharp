/*
 * Fipe API
 *
 * API de Consulta Tabela FIPE fornece pre√ßos m√©dios de ve√≠culos no mercado nacional. Atualizada mensalmente com dados extraidos da tabela FIPE <p>Essa API Fipe utiliza banco de dados pr√≥prio, onde todas as requisi√ß√µes acontecem internamente, sem sobrecarregar o Web Service da Fipe, evitando assim bloqueios por m√∫ltiplos acessos.<p/> <p>A API est√° online desde 2015 e totalmente gratu√≠ta. Gostaria que ele continuasse gratu√≠ta? O que acha de me pagar uma cerveja? üç∫<p/> [![Make a donation](https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QUPMYWH6XAC5G) <br><br> <h3>Available SDKs</h3> [Fipe Go SDK](https://pkg.go.dev/github.com/parallelum/fipe-go) <br> [Fipe .NetCore Nuget](https://www.nuget.org/packages/Br.Com.Parallelum.Fipe/)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: deividfortuna@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Br.Com.Parallelum.Fipe.Client.OpenAPIDateConverter;

namespace Br.Com.Parallelum.Fipe.Model
{
    /// <summary>
    /// FipeResult
    /// </summary>
    [DataContract(Name = "FipeResult")]
    public partial class FipeResult : IEquatable<FipeResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FipeResult" /> class.
        /// </summary>
        /// <param name="price">Price in Brazilian Real.</param>
        /// <param name="brand">Brand of the vehicle.</param>
        /// <param name="model">Model of the vehicle.</param>
        /// <param name="modelYear">Year of vehicle production.</param>
        /// <param name="fuel">Fuel used by the vehicle.</param>
        /// <param name="codeFipe">Unique Fipe identifier.</param>
        /// <param name="referenceMonth">Month of the price.</param>
        /// <param name="vehicleType">Type of the vehicle.</param>
        /// <param name="fuelAcronym">Fuel acronym (eg. G).</param>
        public FipeResult(string price = default(string), string brand = default(string), string model = default(string), int modelYear = default(int), string fuel = default(string), string codeFipe = default(string), string referenceMonth = default(string), int vehicleType = default(int), string fuelAcronym = default(string))
        {
            this.Price = price;
            this.Brand = brand;
            this.Model = model;
            this.ModelYear = modelYear;
            this.Fuel = fuel;
            this.CodeFipe = codeFipe;
            this.ReferenceMonth = referenceMonth;
            this.VehicleType = vehicleType;
            this.FuelAcronym = fuelAcronym;
        }

        /// <summary>
        /// Price in Brazilian Real
        /// </summary>
        /// <value>Price in Brazilian Real</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public string Price { get; set; }

        /// <summary>
        /// Brand of the vehicle
        /// </summary>
        /// <value>Brand of the vehicle</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Model of the vehicle
        /// </summary>
        /// <value>Model of the vehicle</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Year of vehicle production
        /// </summary>
        /// <value>Year of vehicle production</value>
        [DataMember(Name = "modelYear", EmitDefaultValue = false)]
        public int ModelYear { get; set; }

        /// <summary>
        /// Fuel used by the vehicle
        /// </summary>
        /// <value>Fuel used by the vehicle</value>
        [DataMember(Name = "fuel", EmitDefaultValue = false)]
        public string Fuel { get; set; }

        /// <summary>
        /// Unique Fipe identifier
        /// </summary>
        /// <value>Unique Fipe identifier</value>
        [DataMember(Name = "codeFipe", EmitDefaultValue = false)]
        public string CodeFipe { get; set; }

        /// <summary>
        /// Month of the price
        /// </summary>
        /// <value>Month of the price</value>
        [DataMember(Name = "referenceMonth", EmitDefaultValue = false)]
        public string ReferenceMonth { get; set; }

        /// <summary>
        /// Type of the vehicle
        /// </summary>
        /// <value>Type of the vehicle</value>
        [DataMember(Name = "vehicleType", EmitDefaultValue = false)]
        public int VehicleType { get; set; }

        /// <summary>
        /// Fuel acronym (eg. G)
        /// </summary>
        /// <value>Fuel acronym (eg. G)</value>
        [DataMember(Name = "fuelAcronym", EmitDefaultValue = false)]
        public string FuelAcronym { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FipeResult {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModelYear: ").Append(ModelYear).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("  CodeFipe: ").Append(CodeFipe).Append("\n");
            sb.Append("  ReferenceMonth: ").Append(ReferenceMonth).Append("\n");
            sb.Append("  VehicleType: ").Append(VehicleType).Append("\n");
            sb.Append("  FuelAcronym: ").Append(FuelAcronym).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FipeResult);
        }

        /// <summary>
        /// Returns true if FipeResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FipeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FipeResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.ModelYear == input.ModelYear ||
                    this.ModelYear.Equals(input.ModelYear)
                ) && 
                (
                    this.Fuel == input.Fuel ||
                    (this.Fuel != null &&
                    this.Fuel.Equals(input.Fuel))
                ) && 
                (
                    this.CodeFipe == input.CodeFipe ||
                    (this.CodeFipe != null &&
                    this.CodeFipe.Equals(input.CodeFipe))
                ) && 
                (
                    this.ReferenceMonth == input.ReferenceMonth ||
                    (this.ReferenceMonth != null &&
                    this.ReferenceMonth.Equals(input.ReferenceMonth))
                ) && 
                (
                    this.VehicleType == input.VehicleType ||
                    this.VehicleType.Equals(input.VehicleType)
                ) && 
                (
                    this.FuelAcronym == input.FuelAcronym ||
                    (this.FuelAcronym != null &&
                    this.FuelAcronym.Equals(input.FuelAcronym))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                hashCode = hashCode * 59 + this.ModelYear.GetHashCode();
                if (this.Fuel != null)
                    hashCode = hashCode * 59 + this.Fuel.GetHashCode();
                if (this.CodeFipe != null)
                    hashCode = hashCode * 59 + this.CodeFipe.GetHashCode();
                if (this.ReferenceMonth != null)
                    hashCode = hashCode * 59 + this.ReferenceMonth.GetHashCode();
                hashCode = hashCode * 59 + this.VehicleType.GetHashCode();
                if (this.FuelAcronym != null)
                    hashCode = hashCode * 59 + this.FuelAcronym.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
